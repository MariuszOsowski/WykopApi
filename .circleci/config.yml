# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/2.0/testing-ios/
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  unit_test:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    macos:
      xcode: 14.2.0 # Specify the Xcode version to use
    resource_class: macos.x86.medium.gen2

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run: mkdir reports
      - run: swift test -v --parallel --num-workers=1 --xunit-output reports/unittests.xml   
      - store_test_results:
          path: reports/unittests.xml

  swiftlint:
    macos:
      xcode: 14.2.0 # Specify the Xcode version to use
    resource_class: macos.x86.medium.gen2

    steps:
      - checkout
      - run: brew install swiftlint
      - run: mkdir reports
      - run: swiftlint --strict --reporter junit > reports/swiftlint.xml
      - store_test_results:
          path: reports/swiftlint.xml

     
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  tests: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - unit_test
      - swiftlint
